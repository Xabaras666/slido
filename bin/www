#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('slido:server');
var http = require('http');
const socketio = require('socket.io')
const { pool } = require ('../dbConfig');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketio(server)


/**
 * SOCKET.IO PART
 */

io.on('connection', socket => {

  socket.on('joinRoom', (code) => {
    socket.join(code)
  })

  socket.on('chatMessage', (msg, code) => {
    socket.join(code)

  pool.query(`INSERT INTO question (lecture_id, text)
            VALUES ($1, $2) RETURNING question_id`, [code, msg],
      (err, result) => {
        if(err) {
          throw err;
        }
        else {
          let question_id = result.rows;

          pool.query(`UPDATE lecture
                      SET number_of_questions = number_of_questions + 1
                      WHERE lecture_id = $1`, [code],
              (err, result) => {
                if(err) {
                  throw err;
                }
                else {
                  io.to(code).emit('message', {question: msg, id: question_id});
                }
          })
        }
    })


  })

  socket.on('answerMessage', (answer, code, id) => {
    socket.join(code);


    pool.query(`INSERT INTO answer (question_id, text)
                VALUES ($1, $2)`, [id, answer],
        (err, result) => {
          if(err) {
            throw err;
          }
          else {
            pool.query(`UPDATE question
                        SET answered = true
                        WHERE question_id = $1`, [id],
                (err, result) => {
                  if(err) {
                    throw err;
                  }
                  else {
                    io.to(code).emit('answer', {ans: answer, ID: id});
                  }
                })
          }
        })


  })
})





/**
 * Listen on provided port, on all network interfaces.
 */



server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
